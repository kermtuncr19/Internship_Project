@model Product
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

<div class="container py-4">
    <h1 class="display-6 text-center mb-4">@Model.ProductName</h1>

    @if (TempData["CartError"] is string err && !string.IsNullOrWhiteSpace(err))
    {
        <div class="alert alert-warning text-center" role="alert">@err</div>
    }

    <div class="row g-4 align-items-start">
        <!-- ✅ FOTOĞRAF GALERİSİ -->
        <div class="col-lg-6">
            <div class="product-gallery">
                <!-- Ana Fotoğraf Container -->
                <div class="main-image-container position-relative">
                    @{
                        var images = Model.Images?.OrderBy(i => i.DisplayOrder).ToList() ?? new List<ProductImage>();
                        var mainImage = images.FirstOrDefault(i => i.IsMain) ?? images.FirstOrDefault();
                        var mainImageUrl = mainImage?.ImageUrl ?? Model.ImageUrl ?? "/images/default.jpg";
                    }
                    
                    <!-- Büyüteç İkonu -->
                    <div id="zoomIcon" class="zoom-icon">
                        <i class="fa fa-search-plus"></i>
                    </div>

                    <!-- Ana Resim Wrapper (Zoom için) -->
                    <div id="imageWrapper" class="image-zoom-wrapper">
                        <img id="mainImage" class="img-fluid rounded shadow-sm w-100" 
                             src="@mainImageUrl" 
                             alt="@Model.ProductName"
                             style="max-height:560px; object-fit:contain; transition: opacity 0.3s;" />
                        
                        <!-- Büyüteç Lens -->
                        <div id="zoomLens" class="zoom-lens"></div>
                    </div>

                    <!-- Büyütülmüş Görüntü Container -->
                    <div id="zoomResult" class="zoom-result"></div>
                    
                    @if (images.Count > 1)
                    {
                        <button id="prevBtn" class="gallery-nav-btn gallery-nav-left">
                            <i class="fa fa-chevron-left"></i>
                        </button>
                        <button id="nextBtn" class="gallery-nav-btn gallery-nav-right">
                            <i class="fa fa-chevron-right"></i>
                        </button>
                    }
                </div>

                <!-- Küçük Resim Listesi -->
                @if (images.Count > 1)
                {
                    <div class="thumbnail-container mt-3 d-flex gap-2 justify-content-center flex-wrap">
                        @for (int i = 0; i < images.Count; i++)
                        {
                            var img = images[i];
                            <img src="@img.ImageUrl" 
                                 class="thumbnail @(i == 0 ? "active" : "")" 
                                 alt="@Model.ProductName"
                                 data-index="@i"
                                 style="width:80px; height:80px; object-fit:cover; cursor:pointer; border:2px solid transparent; border-radius:8px; transition: all 0.3s;" />
                        }
                    </div>
                }
            </div>
        </div>

        <!-- ÜRÜN BİLGİLERİ -->
        <div class="col-lg-6">
            <div class="d-flex align-items-center gap-2 mb-3">
                <div class="fs-4 text-primary fw-semibold m-0">
                    @Model.Price.ToString("c")
                </div>

                @if (User.Identity?.IsAuthenticated == true)
                {
                    var isFavorite = ViewBag.IsFavorite ?? false;
                    <form class="m-0 p-0 d-inline js-fav-form" id="favForm-@Model.ProductId">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="productId" value="@Model.ProductId" />
                        <button type="button"
                                class="btn p-0 border-0 bg-transparent js-fav-btn"
                                data-url="@Url.Action("ToggleAjax","Favorites")"
                                data-id="@Model.ProductId"
                                aria-pressed="@(isFavorite.ToString().ToLower())"
                                style="line-height:1;">
                            <i class="fav-icon @(isFavorite ? "fa-solid" : "fa-regular") fa-heart fa-lg"
                               style="@(isFavorite ? "color:#dc3545;" : "color:#0d1b4c;") cursor:pointer; transition:color .2s;"></i>
                        </button>
                    </form>
                }
            </div>

            <form id="addToCartForm" class="mt-2" method="post" asp-page="/cart">
                @Html.AntiForgeryToken()
                <input type="hidden" asp-for="ProductId" />
                <input type="hidden" name="returnUrl" value="@ViewContext.HttpContext.Request.PathAndQuery()" />

                @{
                    var sizeCsv = string.IsNullOrWhiteSpace(Model.SizeOptionsCsv)
                                  ? "XS,S,M,L,XL"
                                  : Model.SizeOptionsCsv;

                    var sizeList = sizeCsv
                        .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                        .ToList();

                    var showSizes = sizeList.Any();
                }

                @if (showSizes)
                {
                    <div class="mb-3">
                        <div class="small text-muted mb-2">Beden Seçin</div>
                        <fieldset class="size-list d-flex flex-wrap gap-2" role="radiogroup" aria-label="Beden Seçimi">
                            @foreach (var s in sizeList)
                            {
                                var id = $"size_{s}";
                                <div class="size-chip">
                                    <input type="radio" id="@id" name="size" value="@s" class="visually-hidden" />
                                    <label for="@id" class="size-btn">@s</label>
                                </div>
                            }
                        </fieldset>
                    </div>
                }

                <div class="d-flex align-items-center gap-2">
                    <button id="addToCartBtn"
                            type="submit"
                            class="btn btn-navy btn-pill px-4"
                            @(Model.RequiresSize && showSizes ? "disabled" : null)>
                        <i class="fa fa-cart-plus me-1"></i> Sepete Ekle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@await Component.InvokeAsync("RelatedProducts", new { productId = Model.ProductId, categoryId = Model.CategoryId })



@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const mainImage = document.getElementById('mainImage');
            const thumbnails = document.querySelectorAll('.thumbnail');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const imageWrapper = document.getElementById('imageWrapper');
            const zoomLens = document.getElementById('zoomLens');
            const zoomResult = document.getElementById('zoomResult');
            const zoomIcon = document.getElementById('zoomIcon');
            
            if (!mainImage) return;
            
            let currentIndex = 0;
            const totalImages = thumbnails.length;
            let isZoomActive = false;
            
            // ✅ BÜYÜTEÇ AÇMA/KAPAMA
            imageWrapper.addEventListener('click', function(e) {
                // Ok butonlarına tıklanırsa zoom toggle yapma
                if (e.target.closest('.gallery-nav-btn')) return;
                
                isZoomActive = !isZoomActive;
                
                if (isZoomActive) {
                    imageWrapper.classList.add('zoom-active');
                    initZoom();
                } else {
                    imageWrapper.classList.remove('zoom-active');
                    removeZoomListeners();
                }
            });
            
            let moveHandler = null;
            
            function initZoom() {
                let cx = zoomResult.offsetWidth / zoomLens.offsetWidth;
                let cy = zoomResult.offsetHeight / zoomLens.offsetHeight;
                
                zoomResult.style.backgroundImage = `url('${mainImage.src}')`;
                zoomResult.style.backgroundSize = (mainImage.width * cx) + "px " + (mainImage.height * cy) + "px";
                
                moveHandler = function(e) {
                    moveLens(e);
                };
                
                imageWrapper.addEventListener('mousemove', moveHandler);
                
                function moveLens(e) {
                    e.preventDefault();
                    
                    let pos = getCursorPos(e);
                    let x = pos.x - (zoomLens.offsetWidth / 2);
                    let y = pos.y - (zoomLens.offsetHeight / 2);
                    
                    if (x > imageWrapper.offsetWidth - zoomLens.offsetWidth) {
                        x = imageWrapper.offsetWidth - zoomLens.offsetWidth;
                    }
                    if (x < 0) { x = 0; }
                    if (y > imageWrapper.offsetHeight - zoomLens.offsetHeight) {
                        y = imageWrapper.offsetHeight - zoomLens.offsetHeight;
                    }
                    if (y < 0) { y = 0; }
                    
                    zoomLens.style.left = x + "px";
                    zoomLens.style.top = y + "px";
                    
                    zoomResult.style.backgroundPosition = "-" + (x * cx) + "px -" + (y * cy) + "px";
                }
                
                function getCursorPos(e) {
                    let a, x = 0, y = 0;
                    e = e || window.event;
                    a = imageWrapper.getBoundingClientRect();
                    x = e.pageX - a.left;
                    y = e.pageY - a.top;
                    x = x - window.pageXOffset;
                    y = y - window.pageYOffset;
                    return {x : x, y : y};
                }
            }
            
            function removeZoomListeners() {
                if (moveHandler) {
                    imageWrapper.removeEventListener('mousemove', moveHandler);
                    moveHandler = null;
                }
            }
            
            function updateImage(index) {
                if (thumbnails.length === 0) return;
                
                // Zoom'u kapat
                isZoomActive = false;
                imageWrapper.classList.remove('zoom-active');
                removeZoomListeners();
                
                mainImage.style.opacity = '0';
                setTimeout(() => {
                    mainImage.src = thumbnails[index].src;
                    mainImage.style.opacity = '1';
                    
                    thumbnails.forEach(t => t.classList.remove('active'));
                    thumbnails[index].classList.add('active');
                    currentIndex = index;
                }, 150);
            }
            
            // Thumbnail tıklama
            thumbnails.forEach((thumb, index) => {
                thumb.addEventListener('click', () => updateImage(index));
            });
            
            // Önceki/Sonraki butonlar
            if (prevBtn) {
                prevBtn.addEventListener('click', () => {
                    const newIndex = (currentIndex - 1 + totalImages) % totalImages;
                    updateImage(newIndex);
                });
            }
            
            if (nextBtn) {
                nextBtn.addEventListener('click', () => {
                    const newIndex = (currentIndex + 1) % totalImages;
                    updateImage(newIndex);
                });
            }
            
            // Klavye navigasyonu
            document.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowLeft' && prevBtn) prevBtn.click();
                if (e.key === 'ArrowRight' && nextBtn) nextBtn.click();
            });

            // Beden seçimi
            const requires = @(Model.RequiresSize.ToString().ToLowerInvariant());
            const form = document.getElementById('addToCartForm');
            if (!form) return;

            const radios = form.querySelectorAll('input[name="size"]');
            const button = document.getElementById('addToCartBtn');

            if (requires && radios.length > 0) {
                function syncState() {
                    const anyChecked = Array.from(radios).some(r => r.checked);
                    button.disabled = !anyChecked;
                }

                radios.forEach(r => r.addEventListener('change', syncState));
                syncState();
            }
        });

        // Favoriler
        document.addEventListener('click', async function (e) {
            const btn = e.target.closest('.js-fav-btn');
            if (!btn) return;

            const form = btn.closest('.js-fav-form');
            const icon = btn.querySelector('.fav-icon');

            if (!form || !icon) return;

            const tokenInput = form.querySelector('input[name="__RequestVerificationToken"]');
            const token = tokenInput ? tokenInput.value : null;
            const url = btn.getAttribute('data-url');
            const productId = Number(btn.getAttribute('data-id') || 0);

            try {
                const res = await fetch(url, {
                    method: 'POST',
                    credentials: 'same-origin',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                        ...(token ? { 'RequestVerificationToken': token } : {})
                    },
                    body: JSON.stringify({ ProductId: productId })
                });

                if (!res.ok) {
                    console.error('Fav toggle HTTP error', res.status);
                    return;
                }

                const ct = res.headers.get('content-type') || '';
                if (!ct.includes('application/json')) {
                    window.location.reload();
                    return;
                }

                const data = await res.json();
                if (data?.isFavorite === true) {
                    icon.classList.remove('fa-regular');
                    icon.classList.add('fa-solid');
                    icon.style.color = '#dc3545';
                } else if (data?.isFavorite === false) {
                    icon.classList.remove('fa-solid');
                    icon.classList.add('fa-regular');
                    icon.style.color = '#0d1b4c';
                }
            } catch (err) {
                console.error('Favorites toggle failed', err);
            }
        });
    </script>
}