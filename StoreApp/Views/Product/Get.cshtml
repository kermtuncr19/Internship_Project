@model Product
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

<div class="container py-4">

    
    <h1 class="display-6 text-center mb-4">@Model.ProductName</h1>


    @if (TempData["CartError"] is string err && !string.IsNullOrWhiteSpace(err))
    {
        <div class="alert alert-warning text-center" role="alert">@err</div>
    }

    <div class="row g-4 align-items-start">
        <div class="col-lg-6 text-center">
            <img class="img-fluid rounded shadow-sm"
                 src="@Model?.ImageUrl"
                 alt="@Model?.ProductName"
                 style="max-height:560px; object-fit:contain;" />
        </div>

        <div class="col-lg-6">

            <div class="d-flex align-items-center gap-2 mb-3">
                <div class="fs-4 text-primary fw-semibold m-0">
                    @Model.Price.ToString("c")
                </div>

            @if (User.Identity?.IsAuthenticated == true)
{
    var isFavorite = ViewBag.IsFavorite ?? false;
    <form class="m-0 p-0 d-inline js-fav-form" id="favForm-@Model.ProductId">
        @Html.AntiForgeryToken()
        <input type="hidden" name="productId" value="@Model.ProductId" />

        <button type="button"
                class="btn p-0 border-0 bg-transparent js-fav-btn"
                data-url="@Url.Action("ToggleAjax","Favorites")"
                data-id="@Model.ProductId"
                aria-pressed="@(isFavorite.ToString().ToLower())"
                style="line-height:1;">
            <i class="fav-icon @(isFavorite ? "fa-solid" : "fa-regular") fa-heart fa-lg"
               style="@(isFavorite ? "color:#dc3545;" : "color:#0d1b4c;") cursor:pointer; transition:color .2s;"></i>
        </button>
    </form>
}



            </div>

            <form id="addToCartForm" class="mt-2" method="post" asp-page="/cart">
                @Html.AntiForgeryToken()

                <input type="hidden" asp-for="ProductId" />
                <input type="hidden" name="returnUrl" value="@ViewContext.HttpContext.Request.PathAndQuery()" />

                @{
                    var sizeCsv = string.IsNullOrWhiteSpace(Model.SizeOptionsCsv)
                                  ? "XS,S,M,L,XL"
                                  : Model.SizeOptionsCsv;

                    var sizeList = sizeCsv
                        .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                        .ToList();

                    var showSizes = sizeList.Any();
                }

                @if (showSizes)
                {
                    <div class="mb-3">
                        <div class="small text-muted mb-2">Beden Seçin</div>
                        <fieldset class="size-list d-flex flex-wrap gap-2" role="radiogroup" aria-label="Beden Seçimi">
                            @foreach (var s in sizeList)
                            {
                                var id = $"size_{s}";
                                <div class="size-chip">
                                    <input type="radio" id="@id" name="size" value="@s" class="visually-hidden" />
                                    <label for="@id" class="size-btn">@s</label>
                                </div>
                            }
                        </fieldset>
                    </div>
                }

                <div class="d-flex align-items-center gap-2">
                    <button id="addToCartBtn"
                            type="submit"
                            class="btn btn-navy btn-pill px-4"
                            @(Model.RequiresSize && showSizes ? "disabled" : null)>
                        <i class="fa fa-cart-plus me-1"></i> Sepete Ekle
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@await Component.InvokeAsync("RelatedProducts", new { productId = Model.ProductId, categoryId = Model.CategoryId })


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const requires = @(Model.RequiresSize.ToString().ToLowerInvariant());
            const form = document.getElementById('addToCartForm');
            if (!form) return;

            const radios = form.querySelectorAll('input[name="size"]');
            const button = document.getElementById('addToCartBtn');

            if (!requires || radios.length === 0) return;

            function syncState() {
                const anyChecked = Array.from(radios).some(r => r.checked);
                button.disabled = !anyChecked;
            }

            radios.forEach(r => r.addEventListener('change', syncState));
            syncState();
        });
    </script>

    <script>
      document.addEventListener('click', async function (e) {
        const btn = e.target.closest('.js-fav-btn');
        if (!btn) return;

        const form = btn.closest('.js-fav-form');
        const icon = btn.querySelector('.fav-icon');

        if (!form || !icon) return;

        // Antiforgery token'ı formdaki hidden input'tan al
        const tokenInput = form.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenInput ? tokenInput.value : null;

        const url = btn.getAttribute('data-url');
        const productId = Number(btn.getAttribute('data-id') || 0);

        try {
          const res = await fetch(url, {
            method: 'POST',
            credentials: 'same-origin',
            headers: {
              'X-Requested-With': 'XMLHttpRequest',
              'Accept': 'application/json',
              'Content-Type': 'application/json',
              // ASP.NET Core antiforgery header'ı:
              ...(token ? { 'RequestVerificationToken': token } : {})
            },
            body: JSON.stringify({ ProductId: productId })
          });

          if (!res.ok) {
            console.error('Fav toggle HTTP error', res.status);
            return;
          }

          const ct = res.headers.get('content-type') || '';
          if (!ct.includes('application/json')) {
            // Muhtemel login sayfası/HTML dönerse
            window.location.reload();
            return;
          }

          const data = await res.json();
          if (data?.isFavorite === true) {
            icon.classList.remove('fa-regular');
            icon.classList.add('fa-solid');
            icon.style.color = '#dc3545';
          } else if (data?.isFavorite === false) {
            icon.classList.remove('fa-solid');
            icon.classList.add('fa-regular');
            icon.style.color = '#0d1b4c';
          }
        } catch (err) {
          console.error('Favorites toggle failed', err);
        }
      });
    </script>
}